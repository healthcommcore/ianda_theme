<?php

/**
 * @file
 * Functions to support theming in the SASS Starterkit subtheme.
 */

use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_form_system_theme_settings_alter() for settings form.
 *
 * Replace Barrio setting options with subtheme ones.
 * 
 * Example on how to alter theme settings form
 * 
 */
function ianda_form_system_theme_settings_alter(&$form, FormStateInterface $form_state) {
  $form['components']['navbar']['bootstrap_barrio_navbar_top_background']['#options'] = array(
      'bg-primary' => t('Primary'),
      'bg-secondary' => t('Secondary'),
      'bg-light' => t('Light'),
      'bg-dark' => t('Dark'),
      'bg-white' => t('White'),
      'bg-transparent' => t('Transparent'),
  );
  $form['components']['navbar']['bootstrap_barrio_navbar_background']['#options'] = array(
      'bg-primary' => t('Primary'),
      'bg-secondary' => t('Secondary'),
      'bg-light' => t('Light'),
      'bg-dark' => t('Dark'),
      'bg-white' => t('White'),
      'bg-transparent' => t('Transparent'),
  );
}

/** 
 * Implements hook_preprocess_page_title()
 */
function ianda_preprocess_page_title(&$vars) {
  $vars['is_front'] = is_front_page();
}

/**
 * Simple function returning boolean of whether or not
 * current page is the homepage
 */
function is_front_page() {
  return \Drupal::service('path.matcher')->isFrontPage();
}

/** 
 * Implements hook_preprocess_block()
 */
function ianda_preprocess_block(&$vars) {
  $config = $vars['configuration'];
  if ($config['provider'] == 'views') {
    if ( preg_match("/homepage_tiles/", $config['id']) ) {
      $vars['configuration']['homepage_tile'] = true;
    }
  }
  $vars['is_front'] = is_front_page();
}

/** 
 * Implements hook_preprocess_container()
 */
function ianda_preprocess_container(&$vars) {
  $path = \Drupal::service('path.current')->getPath();
  if(is_search_page($path)) {
    $vars['attributes']['search_page'] = true;
  }
}

/** 
 * Implements hook_preprocess_form_element()
 */
function ianda_preprocess_form_element(&$vars) {
  $path = \Drupal::service('path.current')->getPath();
  if(is_search_page($path)) {
    $vars['attributes']['search_page'] = true;
  }
}

/** 
 * Implements hook_preprocess_input()
 */
function ianda_preprocess_input(&$vars) {
  $path = \Drupal::service('path.current')->getPath();
  if(is_search_page($path)) {
    $vars['attributes']['search_page'] = true;
  }
}

/** 
 * Implements hook_preprocess_search_result()
 *
 * We want to override the default url construction
 * for search results that are services. Instead of
 * linking to the Service content type, we want to
 * link to where the service is listed on the corresponding
 * service category page
 */
function ianda_preprocess_search_result(&$vars) {
  /*
     ['result']['title']
     ['result']['type']
  */
  $result = $vars['result'];
  if ( strtolower($result['type']) !=="service" ) {
    return false;
  }
  $vars['is_service'] = true;
  $path = "/services/";
  $service = '/#';
  $service .= make_friendly_url($result['title']);
  $category = get_category($result);
  $path .= $category . $service;
  $vars['url_override'] = $path;
}

/** 
 * Accepts a $result array, extracts the node object, 
 * finds the taxonomy term's id within the node object's
 * field_service_category, gets the name from get_category_name()
 */
function get_category($result) {
  $cat_name = "";
  $field_service_cat = $result['node']->field_service_category[0];
  $id = method_exists($field_service_cat, 'getString') ? $field_service_cat->getString() : false;
  $cat_name = $id ? get_category_name($id) : "";
  return $cat_name;
}

/**
 * Accepts a taxonomy id, returns the corresponding
 * taxonomy name.
 */
function get_category_name($id) {
  $term = \Drupal\taxonomy\Entity\Term::load($id);
  $name = $term->getName();
  return make_friendly_url($name);
}

/**
 * Accepts a string with spaces and symbols,
 * returns a url-friendly string with dashes
 * in place of spaces.
 */
function make_friendly_url($str) {
  $cleaned_str = remove_unwanted_chars($str);
  $cleaned_arr = explode(' ', $cleaned_str);
  $cleaned_arr = array_filter($cleaned_arr);
  $friendly = implode('-', $cleaned_arr);
  return $friendly;
}

/**
 * Accepts a string, filters out the following
 * symbols: & : ( )
 */
function remove_unwanted_chars($str) {
  $lower = strtolower($str);
  $unwanted = get_unwanted_symbols();
  $cleaned = str_replace($unwanted, '', $lower);
  return $cleaned;
}

function get_unwanted_symbols() {
  return [
    '!', '@', '#', '$', '%', '^',
    '&', '*', '(', ')', ':', ';', ','
  ];
}


/**
 * Accepts a string, returns boolean based
 * on whether or not the string "search"
 * is found.
 */
function is_search_page($path) {
  $path_arr = explode("/", $path);
  return $path_arr[1] == "search";
}
